#!/usr/bin/perl
#$Seq1    = $ARGV[0];#$Seq2    = $ARGV[1];
#@Seq1 = ("");@Seq2=("");
#open(DATEI, "<$ARGV[0]") || die "$_[1] nicht gefunden\n";
#$i=1;
#while(($AktuellesZeichen = getc(DATEI)) ne ""){#
#	$Seq1[$i]=$AktuellesZeichen;
#	$i++;   
 #}
#close(DATEI);

open(INS, "<seq1.txt") || die "Datei mit E-Mails nicht gefunden\n";
while(<INS>)
 {
  push(@Seq1,$_);
 }
close(INS);
open(INS2, "<seq2.txt") || die "Datei mit E-Mails nicht gefunden\n";
while(<INS2>)
 {
  push(@Seq2,$_);
 }
close(INS2);
@seq1    = (' ', split( //, $Seq1[0] ) );
@seq2    = (' ', split( //, $Seq2[0] ) );#print "$seq1[3]$seq1[4]\n";
$Penalty = 10;
$gp      = -$Penalty;                # gap penalty (transition penalty)
$fp      = $Penalty;                 # fit penalty M(i,j)
$sp      = -$Penalty;                # substitution penalty M(i,j)
$n       = 0;
$N       = $#seq2 - $#seq1;
$tmp	 = 0;
$tmp2	 = -1000000000000000000000000;
$l	 = 0;
#@merke1=0;@merke2=0;@merke0=Null;
print "seq1:@seq1\nseq2:@seq2\nseq1lenght:$#seq1\tseq2length:$#seq2\tdiff:$N\n";
while ( $n <= $N ) {
############### Match/Mismatch-Matrix #####################
	for ( $i = 0 ; $i <= $#seq1 ; $i++ ) {
		for ( $j = $n ; $j <= $n + $#seq1; $j++ ) {
			if ( $seq1[$i] ne $seq2[$j] ) {
				$M[$i][$j] = $sp;
			}                        
			else {
				$M[$i][$j] = $fp;
			}                        
		}
	}
#################### Score-Matrix #########################
	$MINSCORE = -1000000000;
	for ( $i = 0 ; $i <= $#seq1 ; $i++ ) {
		for ( $j = $n ; $j <= $n + $#seq1 ; $j++ ) {
			$S[$i][$j] = $MINSCORE;
		}
	}
	$k = 0;
	for ( $j = $n ; $j <= $n + $#seq1 ; $j++ ) {
		$S[0][$j] = $k * $gp + $M[0][$j];
		$k++;
		$T[0][$j] = -1;
	}
	
	for ( $i = 0 ; $i <= $#seq1 ; $i++ ) {
		$S[$i][$n] = $i * $gp + $M[$i][$n];
		$T[$i][$n] = 1;
	}
	$MaxScore = $MINSCORE;
	$TotalScore = 0;
	for ( $i = 1 ; $i <= $#seq1 ; $i++ ) {
		for ( $j = $n + 1 ; $j <= $n + $#seq1; $j++ ) {
			$sc        	= $S[$i-1][$j-1] + $M[$i][$j];
			$sc2        = $S[$i-1][$j-1] + $M[$i][$j];
			$S[$i][$j] 	= $sc;
			$TotalScore+=$sc2;
			$T[$i][$j] 	= 0;
			$sc 		= $S[ $i-1][$j] + $gp;
			if ( $sc > $S[$i][$j] ) { $S[$i][$j] = $sc; $T[$i][$j] = 1; $TotalScore=$TotalScore-$sc2+$sc;}
			$sc2 		= $S[ $i-1][$j] + $gp;
			$sc 		= $S[$i][$j-1] + $gp;
			if ( $sc > $S[$i][$j] ) { $S[$i][$j] = $sc; $T[$i][$j] = -1; $TotalScore=$TotalScore-$sc2+$sc;}
			if ( $S[$i][$j] > $MaxScore ) {
				$MaxScore = $S[$i][$j];
			}
		}
	}
################# Traceback-Matrix ######################
	$i = $#seq1;
	$j = $n+$#seq1;
	$a=0;
	while (1) {
		if ( $T[$i][$j] == 0 ) {
			@aseq1 = ( $seq1[$i], @aseq1 );
			@aseq2 = ( $seq2[$j], @aseq2 );
			@amatch = ( '*', @amatch );
			$i--;$a++;
			$j--;  
		}
		else {
			if ( $T[$i][$j] == 1 ) {
				@aseq1 = ( $seq1[$i], @aseq1 );
				@aseq2  = ( '-', @aseq2 );
				@amatch = ( ' ', @amatch );
				$i--;$a++;   
			}
			else {
				if ( $T[$i][$j] == -1 ) {
					@aseq1 = ( '-', @aseq1 );
					@aseq2 = ( $seq2[$j], @aseq2 );
					@amatch = ( ' ', @amatch );
					$j--;$a++; 
				}
			}
		}
		last if ( $i == 0 && $j == $n );
	}
	if ($MaxScore>=$tmp && $TotalScore>=$tmp2){
		$l++;
		$tmp=$MaxScore;
		$tmp2=$TotalScore;
		for ($i=0;$i<=$a;$i++){
			$merke0[$i]=$aseq1[$i];
			$merke1[$i]=$amatch[$i];
			$merke2[$i]=$aseq2[$i];
		}
		print "\nit=$l, MaxScore= $tmp, TotalScore=$TotalScore, Alignment an Position $n der 2.Sequenz:\n\n\t@merke0\n\t@merke1\n\t@merke2\n\n";
	}
#	print "\nit=$l, MaxScore= $tmp, TotalScore=$TotalScore, Alignment an Position $n der 2.Sequenz:\n\n\t@merke0\n@merke1\n\t@merke2\n\n";
	print "it=$l, MaxScore= $MaxScore, TotalScore=$TotalScore, Alignment an Position $n der 2.Sequenz\n";
	$n++;
}

